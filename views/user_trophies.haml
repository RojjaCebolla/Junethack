%li
    .trophyleft{id: link_id($variants_mapping[@variant])}
        %a{href: "##{link_id($variants_mapping[@variant])}"}= $variants_mapping[@variant]
    .trophyright
        / user competition trophies
        - trophies = Trophy.user_competition_trophies @variant
        - user_competition_trophies = repository.adapter.select "select trophy from competition_score_entries where user_id = ? and variant = ? and rank = 1", @player.id, @variant
        / only show if there are any
        - if user_competition_trophies.size > 0 then
            - for trophy in trophies
                =haml :trophy, :locals => {:trophy => trophy, :achieved => (user_competition_trophies.include? trophy.trophy)}
            %br

        / user "All Conducts/Roles/Races/Alignments/Genders" trophies
        - trophies = Trophy.user_all_stuff_trophies @variant
        - user_all_stuff_trophies = repository.adapter.select "select trophy from scoreentries where user_id = ? and variant = ? and trophy like 'all_%'", @player.id, @variant
        / only show if there are any
        - if user_all_stuff_trophies.size > 0 then
            - for trophy in trophies
                =haml :trophy, :locals => {:trophy => trophy, :achieved => (user_all_stuff_trophies.include? trophy.trophy)}
            %br

        / user trophies
        - trophies = Trophy.user_trophies @variant
        - user_trophies = repository.adapter.select "select trophy from scoreentries where user_id = ? and variant = ?", @player.id, @variant
        - row = 1
        - for trophy in trophies
            - newline = trophy.row != row
            - row = trophy.row
            - has_trophies_in_this_row = (trophies.select {|t| t.row == trophy.row }.map(&:trophy) & user_trophies).size > 0
            - if has_trophies_in_this_row || row == 1
                - if newline
                    %br
                =haml :trophy, locals: { trophy: trophy, achieved: (user_trophies.include? trophy.trophy)}
                -# workaround for the fact that the master of thieves is a quest leader and nemesis
                - if trophy.trophy == 'defeated_ashikaga_takauji' && (trophy = Trophy.first(variant: @variant, trophy: 'defeated_master_of_thieves'))
                    =haml :trophy, locals: { trophy: trophy, achieved: (user_trophies.include? trophy.trophy)}
